server:
  port: 10010 # 网关端口
spring:
  application:
    name: gateway # 服务名称
  cloud:
    nacos:
      server-addr: localhost:8848 # nacos地址
    gateway:
      globalcors: # 全局的跨域处理
      add-to-simple-url-handler-mapping: true # 解决options请求被拦截问题
      corsConfigurations:
      '[/**]':
      allowedOrigins: # 允许哪些网站的跨域请求
        - "http://192.168.17.129:9001"
        - "http://192.168.17.129:9002"
      allowedMethods: # 允许的跨域ajax的请求方式
        - "GET"
        - "POST"
        - "DELETE"
        - "PUT"
        - "OPTIONS"
      allowedHeaders: "*" # 允许在请求中携带的头信息
      allowCredentials: true # 是否允许携带cookie
      maxAge: 360000 # 这次跨域检测的有效


      routes: #网关路由配置
        #用户服务
        - id: user-service #路由id，自定义，只要唯一即可
          # uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址
          uri: lb://userservice # 路由的目标地址 lb就是负载均衡，后面跟服务名称
          predicates: #路由断言，也就是判断请求是否符合路由规则的条件
            - Path=/user/**,/address/** #这个是按照路径匹配，只要以/user/开头就符合要求
#          filters: # 局部过滤器，在那个服务器下配就过滤哪个
#            - AddRequestHeader=Truth, Itcast is freaking awesome! # 添加请求头，由Key和value组成
        - id: order-service #订单服务
          uri: lb://orderservice
          predicates:
            - Path=/order/**,/pay/**

        - id: item-service #商品服务
          uri: lb://itemservice
          predicates:
              - Path=/item/**
        - id: search-service #搜索服务
          uri: lb://searchservice
          predicates:
              - Path=/search/**

      default-filters: # 默认过滤项,所有的路由都生效
        - AddRequestHeader=authorization,2